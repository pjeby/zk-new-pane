'use strict';

var obsidian = require('obsidian');

function around(obj, factories) {
    const removers = Object.keys(factories).map(key => around1(obj, key, factories[key]));
    return removers.length === 1 ? removers[0] : function () { removers.forEach(r => r()); };
}
function around1(obj, method, createWrapper) {
    const original = obj[method], hadOwn = obj.hasOwnProperty(method);
    let current = createWrapper(original);
    // Let our wrapper inherit static props from the wrapping method,
    // and the wrapping method, props from the original method
    if (original)
        Object.setPrototypeOf(current, original);
    Object.setPrototypeOf(wrapper, current);
    obj[method] = wrapper;
    // Return a callback to allow safe removal
    return remove;
    function wrapper(...args) {
        // If we have been deactivated and are no longer wrapped, remove ourselves
        if (current === original && obj[method] === wrapper)
            remove();
        return current.apply(this, args);
    }
    function remove() {
        // If no other patches, just do a direct removal
        if (obj[method] === wrapper) {
            if (hadOwn)
                obj[method] = original;
            else
                delete obj[method];
        }
        if (current === original)
            return;
        // Else pass future calls through, and remove wrapper from the prototype chain
        current = original;
        Object.setPrototypeOf(wrapper, original || Function);
    }
}

class ZkNewPane extends obsidian.Plugin {
    onload() {
        const zkp = this.zkp = this.app.internalPlugins.plugins["zk-prefixer"];
        const cb = this.cb = zkp.ribbonActions[0].callback;
        const handler = this.handler = (event) => {
            return obsidian.Keymap.isModifier(event, "Mod") ? this.openInNewPane() : cb(event);
        };
        this.replaceButtonHandlers(cb, handler);
        this.addCommand({ id: "zk-new-pane",   name: "Create a Zettelkasten note in a new pane", checkCallback: (check) => {
            if (!this.zkp.enabled) return false;
            if (check) return true;
            return this.openInNewPane();
        }});
    }

    async openInNewPane() {
        let leaf = this.app.workspace.splitActiveLeaf();
        const remove = around(this.app.workspace, {getLeaf(prev) { return function(){ remove(); return leaf;} }});
        try {
            if (!this.zkp.enabled) throw new Error("Zettelkasten core plugin must be enabled")
            await this.zkp.instance.onCreateNote();
            this.app.workspace.setActiveLeaf(leaf);
            leaf.setEphemeralState({rename: "end"});
            remove();
        } catch(e) {
            remove();
            leaf.detach();
            console.error(e);
            new obsidian.Notice(e.message);
        }
    }

    replaceButtonHandlers(oldCb, newCb) {
        this.zkp.addedButtonEls.forEach(el => {
            el.removeEventListener("click", oldCb);
            el.addEventListener("click", newCb);
        });
    }

    onunload() {
        this.replaceButtonHandlers(this.handler, this.cb);
    }
}

module.exports = ZkNewPane;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
